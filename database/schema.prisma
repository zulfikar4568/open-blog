// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures=["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Role {
  USER
  ADMIN
}

model Session {
  id                  Int      @id @default(autoincrement())
  user                User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int      @db.Integer()
  token               String   @unique @db.Text
  refresh             String   @unique @db.VarChar(255)
  data                Json
  expiredAt           DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("sessions")
}

model User {
  id                  Int @id @default(autoincrement())
  firstName           String
  lastName            String?
  email               String @db.VarChar(50) @unique
  imageUrl            String?
  phoneNumber         String?
  password            String?
  googleId            String? @db.VarChar(50)
  roles               Role[] @default(value: [USER])

  posts               Post[]
  sessions            Session[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("users")
}


model Post {
  id                  Int @id @default(autoincrement())
  title               String @db.VarChar(50)
  imageCover          String?
  summary             String?
  postContents        String?
  lastRead            DateTime
  counterLike         Int @db.Integer()

  tags                PostTag[]
  categories          PostCategory[]
  
  userId              Int @db.Integer()
  user                User @relation(fields: [id], references: [id])

  isPublished         Boolean?
  updatedAt           DateTime @updatedAt()
  createdAt           DateTime @default(now())

  @@map("maps")
}

model PostTag {
  postId              Int @db.Integer()
  post                Post @relation(fields: [postId], references: [id])
  tagId               Int @db.Integer()
  tag                 Tag @relation(fields: [tagId], references: [id])

  updatedAt           DateTime @updatedAt()
  createdAt           DateTime @default(now())

  @@id([postId, tagId])
  @@map("posts_tags")
}

model Tag {
  id                  Int @id @default(autoincrement())
  name                String @db.VarChar(50)
  description         String?

  posts               PostTag[]

  updatedAt           DateTime @updatedAt()
  createdAt           DateTime @default(now())

  @@map("tags")
}

model PostCategory {
  postId              Int @db.Integer()
  post                Post @relation(fields: [postId], references: [id])
  categoryId          Int @db.Integer()
  category            Category @relation(fields: [categoryId], references: [id])

  updatedAt           DateTime @updatedAt()
  createdAt           DateTime @default(now())

  @@id([postId, categoryId])
  @@map("posts_categories")
}

model Category {
  id                  Int @id @default(autoincrement())
  name                String @db.VarChar(50)
  description         String?

  posts               PostCategory[]

  updatedAt           DateTime @updatedAt()
  createdAt           DateTime @default(now())

  @@map("categories")
}